{"version":3,"sources":["logo.svg","Movie.js","LoadingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","year","title","summary","poster","genres","className","htmlFor","src","alt","map","genre","index","key","slice","LoadingPage","Logo","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,oRC2B5BC,G,MAvBD,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,KAAKC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,QAAQC,EAAyB,EAAzBA,OAAyB,IAAjBC,cAAiB,MAAR,GAAQ,EAExD,OAAQ,yBAAKC,UAAU,SACnB,2BAAOC,QAAQ,KACf,yBAAKC,IAAKJ,EAAQK,IAAKP,IACvB,yBAAKI,UAAU,cACX,wBAAIA,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,cAAcL,GAChC,wBAAIK,UAAU,UAAUD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAmB,wBAAIC,IAAKD,EAAON,UAAU,gBAAgBM,EAAOD,OACnG,uBAAGL,UAAU,iBAAiBH,EAAQW,MAAM,EAAE,U,yBCA3CC,G,MATK,WAChB,OACI,6BACI,yBAAKP,IAAKQ,MACV,6CCyCGC,E,4MA1CbC,MAAQ,CACNC,WAAY,EACZC,OAAS,I,EAGXC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,0CALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAACN,SAAQD,WAAY,IANzB,2C,4KAUVQ,KAAKN,Y,qIAGG,IAAD,EACqBM,KAAKT,MAA1BC,EADA,EACAA,UAAWC,EADX,EACWA,OAClB,OAAQ,6BAASd,UAAU,aACxBa,EACC,kBAAC,EAAD,MAEA,yBAAKb,UAAU,UACZc,EAAOV,KAAI,SAAAkB,GAAK,OACjB,kBAAC,EAAD,CACAf,IAAKe,EAAMC,GACXA,GAAID,EAAMC,GACV5B,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAME,mBACdzB,OAAQuB,EAAMvB,kB,GAlCN0B,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ec55645.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\nimport \"./Movie.css\"\n\nconst Movie = ({year,title,summary,poster, genres = []}) => {\n    \n    return (<div className=\"movie\">\n        <label htmlFor=\"\"></label>\n        <img src={poster} alt={title}></img>\n        <div className=\"movie-data\">\n            <h3 className=\"movie-title\">{title}</h3>\n            <h5 className=\"movie-year\">{year}</h5>\n        <ul className=\"genres\">{genres.map((genre, index) => (<li key={index} className=\"genres-genre\">{index}{genre}</li>))}</ul>\n            <p className=\"movie-summary\">{summary.slice(0,140)}</p>\n        </div>\n    </div>)\n};\n\nMovie.propTypes = {\n    id : PropTypes.number.isRequired,\n    year : PropTypes.number.isRequired,\n    title : PropTypes.string.isRequired,\n    summary : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport Logo from './logo.svg'\nimport './LoadingPage.css';\n\nconst LoadingPage = () => {\n    return (\n        <div>\n            <img src={Logo}></img>\n            <h1>Loading...</h1>\n        </div>\n    );\n};\n\nexport default LoadingPage;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie'\nimport './App.css'\nimport Loading from './LoadingPage'\n\nclass App extends React.Component {\n  state = {\n    isLoading : true,\n    movies : []\n  };\n\n  getMovies = async () => {\n    const {\n      data : {\n        data : {movies}\n      }\n    } = await axios.get(\"https://yts.mx/api/v2/list_movies.json\");\n    this.setState({movies, isLoading : false});\n  }\n\n  async componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const {isLoading, movies} = this.state;\n    return (<section className=\"container\">\n      {isLoading \n      ? <Loading></Loading>\n    :  (\n        <div className=\"movies\">\n          {movies.map(movie => (\n          <Movie\n          key={movie.id}\n          id={movie.id} \n          year={movie.year} \n          title={movie.title} \n          summary={movie.summary} \n          poster={movie.medium_cover_image}\n          genres={movie.genres}>\n        </Movie>\n      ))}\n      </div>\n      )}\n    </section>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}